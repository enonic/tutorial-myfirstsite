plugins {
	id 'java'
	id 'com.enonic.xp.app' version '3.4.0'
	id 'com.github.node-gradle.node' version '7.0.2'
}

app {
	name = "${appName}"
	displayName = "${appDisplayName}"
	vendorName = "${vendorName}"
	vendorUrl = "${vendorUrl}"
	systemVersion = "${xpVersion}"
}

dependencies {
	compileOnly "com.enonic.xp:core-api:${xpVersion}"
	compileOnly "com.enonic.xp:portal-api:${xpVersion}"
	include "com.enonic.xp:lib-cluster:${xpVersion}"
	include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-context:${xpVersion}"
	include "com.enonic.xp:lib-export:${xpVersion}"
	include "com.enonic.xp:lib-io:${xpVersion}"
	include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.xp:lib-project:${xpVersion}"
	include 'com.enonic.lib:lib-cache:2.2.0'
	include 'com.enonic.lib:lib-http-client:3.2.2'
	include "com.enonic.lib:lib-thymeleaf:2.1.0"
	include "com.enonic.lib:lib-mustache:2.1.1"
	include 'com.enonic.lib:lib-static:1.0.3'
}

repositories {
	mavenLocal()
	mavenCentral()
	xp.enonicRepo()
}

node {
	// Whether to download and install a specific Node.js version or not
	// If false, it will use the globally installed Node.js
	// If true, it will download node using above parameters
	// Note that npm is bundled with Node.js
	download = true

	// Version of node to download and install (only used if download is true)
	// It will be unpacked in the workDir
	version = '20.12.2'
}

apply from: "$projectDir/gradle/env.gradle"

tasks.withType(Copy).configureEach {
	includeEmptyDirs = false
}

tasks.register('dev', NpmTask) {
	args = [
		'run',
		'watch'
	]
	dependsOn npmInstall, deploy
	environment = [
		'FORCE_COLOR': 'true',
	]
}

tasks.register('npmCheck', NpmTask) {
	dependsOn npmInstall
	args = [
		'run',
		'check'
	]
	environment = [
		'FORCE_COLOR': 'true',
	]
}

// If you ALWAYS want to SKIP `test` and `check` tasks on development build, uncomment the 'if...' below
// if (!isProd()) {
check.dependsOn npmCheck
// }

tasks.register('npmBuild', NpmTask) {
	args = [
		'run',
		//'--silent',
		isProd() ? 'minify' : 'build'
	]
	dependsOn npmInstall
	environment = [
		'FORCE_COLOR': 'true',
		'LOG_LEVEL_FROM_GRADLE': gradle.startParameter.logLevel.toString(),
		'NODE_ENV': nodeEnvironment()
	]
	inputs.dir 'src/main/resources'
	outputs.dir 'build/resources/main'
}

jar.dependsOn npmBuild

processResources {
	exclude '**/.gitkeep'
	exclude '**/*.json'
	exclude '**/*.scss'
	exclude '**/*.ts'
	exclude '**/*.tsx'
	exclude 'static/images/**/*.*'
}
